<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd 
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd 
                           http://www.springframework.org/schema/mvc 
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 
		https://blog.csdn.net/menglinjie/article/details/79656621
	 -->
	 
	 
    <!-- 扫描带@Controller的类 -->
    <context:component-scan base-package="modules.*.ctrl" />
    <!-- 加载注解驱动，自动加载默认处理器映射器和处理器适配器 -->
    <mvc:annotation-driven/>
    <!--访问静态资源（假如没找到相应的控制器就去找静态资源，如果都没有则返回404）-->
    <mvc:default-servlet-handler/>
    
	<!--配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理-->
	<mvc:resources mapping="/img/**" location="/img/" cache-period="86400"/>
	<mvc:resources mapping="/js/**" location="/js/" cache-period="86400"/>
	<mvc:resources mapping="/css/**" location="/css/" cache-period="86400"/>
	<mvc:resources mapping="/html/**" location="/html/" cache-period="86400"/>
	<mvc:resources mapping="/static/**" location="/static/" cache-period="86400"/>
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里配的是接收后台响应的jsp页面地址，如果controller中返回的是【pages/system/login】,则返回到的页面是【/pages/system/login.jsp】 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>
	<!--配置json转换-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
            <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
	<!-- 设置Jackson在返回的时候过滤掉null的数据 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean
                class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="serializationInclusion">
                            <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!--json转换器 -->
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
    <bean
        class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
	
    <bean id="mappingJacksonHttpMessageConverter"
        class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="text" />
                    <constructor-arg index="1" value="plain" />
                    <constructor-arg index="2" value="UTF-8" />
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="*" />
                    <constructor-arg index="1" value="*" />
                    <constructor-arg index="2" value="UTF-8" />
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="text" />
                    <constructor-arg index="1" value="*" />
                    <constructor-arg index="2" value="UTF-8" />
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="application" />
                    <constructor-arg index="1" value="json" />
                    <constructor-arg index="2" value="UTF-8" />
                </bean>
            </list>
        </property>
    </bean>
    
	<!-- 配置自定义拦截器  实现类的继承不要整错 否则没法实例化-->
	<mvc:interceptors>
    	<mvc:interceptor>
    		<!-- 需要拦截的请求，这里配的是所有请求都会拦截 -->
    		<!--  -->
    		<!-- 不被拦截的请求 -->
    		<!-- <mvc:exclude-mapping path="/leq/**"/>
    		<mvc:exclude-mapping path="/pages/system/**"/> -->
    		<mvc:mapping path="/**"/>
    		<mvc:mapping path="/fengjing/ureport/designer"/>
    		<mvc:exclude-mapping path="/fengjing/login/home"/>
    		<!-- 自定义拦截器类 -->
    		<bean class="modules.common.utils.CommonInterceptor"/>
    	</mvc:interceptor>
    </mvc:interceptors>
    
</beans>
